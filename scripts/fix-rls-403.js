/**
 * CORRE√á√ÉO IMEDIATA PARA ERRO 403 - RLS POLICY VIOLATION
 * 
 * Execute este script no console do navegador para diagnosticar
 * e tentar corrigir problemas de Row Level Security (RLS).
 */

console.log('üîí INICIANDO CORRE√á√ÉO DE ERRO 403 RLS...');
console.log('');

// Fun√ß√£o para diagnosticar problemas de RLS
async function diagnoseRLSIssue() {
  try {
    console.log('1. üîç Verificando autentica√ß√£o atual...');
    
    // Verificar se h√° um cliente Supabase dispon√≠vel
    let supabaseClient = null;
    
    if (window.supabase) {
      supabaseClient = window.supabase;
    } else if (window.__SUPABASE_CLIENT__) {
      supabaseClient = window.__SUPABASE_CLIENT__;
    } else {
      console.log('   ‚ùå Cliente Supabase n√£o encontrado');
      return { needsReload: true, reason: 'no_supabase_client' };
    }
    
    // Verificar usu√°rio atual
    const { data: { user }, error: userError } = await supabaseClient.auth.getUser();
    
    if (userError || !user) {
      console.log('   ‚ùå Usu√°rio n√£o autenticado:', userError?.message);
      return { needsLogin: true, reason: 'not_authenticated' };
    }
    
    console.log('   ‚úÖ Usu√°rio autenticado:', user.email);
    console.log('   üë§ User ID:', user.id);
    
    // Verificar sess√£o atual
    console.log('2. üîç Verificando sess√£o...');
    const { data: { session }, error: sessionError } = await supabaseClient.auth.getSession();
    
    if (sessionError) {
      console.log('   ‚ùå Erro na sess√£o:', sessionError.message);
      return { needsRefresh: true, reason: 'session_error' };
    }
    
    if (!session) {
      console.log('   ‚ùå Nenhuma sess√£o ativa');
      return { needsLogin: true, reason: 'no_session' };
    }
    
    // Verificar se o token n√£o expirou
    const now = Math.floor(Date.now() / 1000);
    if (session.expires_at && session.expires_at < now) {
      console.log('   ‚è∞ Token expirado, tentando refresh...');
      
      const { data: refreshData, error: refreshError } = await supabaseClient.auth.refreshSession();
      
      if (refreshError) {
        console.log('   ‚ùå Erro no refresh:', refreshError.message);
        return { needsLogin: true, reason: 'refresh_failed' };
      }
      
      console.log('   ‚úÖ Token renovado com sucesso');
    } else {
      console.log('   ‚úÖ Token v√°lido');
    }
    
    // Testar permiss√µes b√°sicas
    console.log('3. üîç Testando permiss√µes RLS...');
    
    // Testar leitura na tabela designacoes
    try {
      const { data: testRead, error: readError } = await supabaseClient
        .from('designacoes')
        .select('id')
        .limit(1);
      
      if (readError) {
        console.log('   ‚ùå Erro na leitura de designa√ß√µes:', readError.message);
        if (readError.code === '42501') {
          console.log('   üîí Viola√ß√£o de pol√≠tica RLS detectada');
          return { needsRLSFix: true, reason: 'rls_read_violation' };
        }
      } else {
        console.log('   ‚úÖ Leitura de designa√ß√µes OK');
      }
    } catch (readTestError) {
      console.log('   ‚ùå Exce√ß√£o no teste de leitura:', readTestError.message);
    }
    
    // Testar leitura na tabela profiles
    try {
      const { data: profileData, error: profileError } = await supabaseClient
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();
      
      if (profileError) {
        console.log('   ‚ùå Erro ao carregar perfil:', profileError.message);
        return { needsProfileFix: true, reason: 'profile_error' };
      } else {
        console.log('   ‚úÖ Perfil carregado:', profileData.role || 'sem role');
      }
    } catch (profileTestError) {
      console.log('   ‚ùå Exce√ß√£o no teste de perfil:', profileTestError.message);
    }
    
    return { allGood: true, reason: 'permissions_ok' };
    
  } catch (error) {
    console.error('‚ùå Erro durante diagn√≥stico:', error);
    return { needsReload: true, reason: 'diagnostic_error' };
  }
}

// Fun√ß√£o para tentar corrigir problemas de RLS
async function attemptRLSFix() {
  console.log('üîß Tentando corrigir problemas de RLS...');
  
  try {
    // Obter cliente Supabase
    const supabaseClient = window.supabase || window.__SUPABASE_CLIENT__;
    
    if (!supabaseClient) {
      console.log('   ‚ùå Cliente Supabase n√£o dispon√≠vel');
      return false;
    }
    
    // Tentar refresh da sess√£o
    console.log('   üîÑ Renovando sess√£o...');
    const { data: refreshData, error: refreshError } = await supabaseClient.auth.refreshSession();
    
    if (refreshError) {
      console.log('   ‚ùå Erro no refresh:', refreshError.message);
      return false;
    }
    
    console.log('   ‚úÖ Sess√£o renovada');
    
    // Aguardar um pouco para a sess√£o se propagar
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    // Testar novamente
    const { data: testData, error: testError } = await supabaseClient
      .from('designacoes')
      .select('id')
      .limit(1);
    
    if (testError) {
      console.log('   ‚ùå Ainda h√° erro ap√≥s refresh:', testError.message);
      return false;
    }
    
    console.log('   ‚úÖ Teste de permiss√£o passou ap√≥s refresh');
    return true;
    
  } catch (error) {
    console.error('   ‚ùå Erro durante tentativa de corre√ß√£o:', error);
    return false;
  }
}

// Executar diagn√≥stico
diagnoseRLSIssue().then(async result => {
  console.log('');
  console.log('üìã RESULTADO DO DIAGN√ìSTICO:');
  console.log(`   Motivo: ${result.reason}`);
  console.log('');
  
  if (result.needsLogin) {
    console.log('üîÑ A√á√ÉO NECESS√ÅRIA: FAZER LOGIN');
    console.log('1. A p√°gina ser√° recarregada em 3 segundos');
    console.log('2. Fa√ßa login novamente com suas credenciais');
    console.log('3. Tente a opera√ß√£o novamente');
    
    setTimeout(() => {
      console.log('üîÑ RECARREGANDO P√ÅGINA...');
      window.location.reload();
    }, 3000);
    
  } else if (result.needsRefresh || result.needsRLSFix) {
    console.log('üîß TENTANDO CORRE√á√ÉO AUTOM√ÅTICA...');
    
    const fixResult = await attemptRLSFix();
    
    if (fixResult) {
      console.log('‚úÖ CORRE√á√ÉO BEM-SUCEDIDA!');
      console.log('   Tente executar a opera√ß√£o novamente.');
    } else {
      console.log('‚ùå CORRE√á√ÉO FALHOU');
      console.log('üîÑ Recarregando p√°gina em 3 segundos...');
      
      setTimeout(() => {
        console.log('üîÑ RECARREGANDO P√ÅGINA...');
        window.location.reload();
      }, 3000);
    }
    
  } else if (result.needsReload) {
    console.log('üîÑ RECARREGAMENTO NECESS√ÅRIO');
    console.log('   A p√°gina ser√° recarregada em 3 segundos');
    
    setTimeout(() => {
      console.log('üîÑ RECARREGANDO P√ÅGINA...');
      window.location.reload();
    }, 3000);
    
  } else if (result.allGood) {
    console.log('‚úÖ PERMISS√ïES OK!');
    console.log('   O erro 403 pode ter sido tempor√°rio.');
    console.log('   Tente executar a opera√ß√£o novamente.');
    
  } else {
    console.log('‚ùì RESULTADO INESPERADO');
    console.log('   Tente recarregar a p√°gina manualmente.');
  }
  
}).catch(error => {
  console.error('‚ùå ERRO CR√çTICO:', error);
  console.log('');
  console.log('üîß SOLU√á√ÉO MANUAL:');
  console.log('1. Recarregue a p√°gina (F5)');
  console.log('2. Fa√ßa logout e login novamente');
  console.log('3. Limpe o cache do navegador se necess√°rio');
  console.log('4. Entre em contato com o suporte se o problema persistir');
});