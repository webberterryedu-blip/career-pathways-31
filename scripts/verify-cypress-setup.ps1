# PowerShell script para verificar a configura√ß√£o do Cypress
# Sistema Ministerial - Verifica√ß√£o de Setup

Write-Host "üîç Verificando Configura√ß√£o do Cypress - Sistema Ministerial" -ForegroundColor Cyan
Write-Host ""

$errors = @()
$warnings = @()

# Fun√ß√£o para verificar comandos
function Test-Command {
    param([string]$Command)
    try {
        $null = Get-Command $Command -ErrorAction Stop
        return $true
    } catch {
        return $false
    }
}

# 1. Verificar Node.js
Write-Host "1Ô∏è‚É£ Verificando Node.js..." -ForegroundColor Yellow
if (Test-Command "node") {
    $nodeVersion = node --version
    Write-Host "   ‚úÖ Node.js encontrado: $nodeVersion" -ForegroundColor Green
    
    # Verificar vers√£o m√≠nima (v16+)
    $versionNumber = [int]($nodeVersion -replace 'v(\d+)\..*', '$1')
    if ($versionNumber -lt 16) {
        $warnings += "Node.js vers√£o $nodeVersion pode ser muito antiga. Recomendado v16+"
    }
} else {
    $errors += "Node.js n√£o encontrado. Instale de https://nodejs.org/"
}

# 2. Verificar npm
Write-Host "2Ô∏è‚É£ Verificando npm..." -ForegroundColor Yellow
if (Test-Command "npm") {
    $npmVersion = npm --version
    Write-Host "   ‚úÖ npm encontrado: v$npmVersion" -ForegroundColor Green
} else {
    $errors += "npm n√£o encontrado. Reinstale Node.js"
}

# 3. Verificar npx
Write-Host "3Ô∏è‚É£ Verificando npx..." -ForegroundColor Yellow
if (Test-Command "npx") {
    $npxVersion = npx --version
    Write-Host "   ‚úÖ npx encontrado: v$npxVersion" -ForegroundColor Green
} else {
    $errors += "npx n√£o encontrado. Reinstale Node.js"
}

# 4. Verificar diret√≥rio do projeto
Write-Host "4Ô∏è‚É£ Verificando diret√≥rio do projeto..." -ForegroundColor Yellow
$expectedPath = "C:\Users\frank.MONITORE-MAFRA\Documents\GitHub\sua-parte"
$currentPath = Get-Location

if ($currentPath.Path -eq $expectedPath) {
    Write-Host "   ‚úÖ Diret√≥rio correto: $currentPath" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è Diret√≥rio atual: $currentPath" -ForegroundColor Yellow
    Write-Host "   ‚ö†Ô∏è Esperado: $expectedPath" -ForegroundColor Yellow
    $warnings += "Voc√™ pode n√£o estar no diret√≥rio correto do projeto"
}

# 5. Verificar package.json
Write-Host "5Ô∏è‚É£ Verificando package.json..." -ForegroundColor Yellow
if (Test-Path "package.json") {
    Write-Host "   ‚úÖ package.json encontrado" -ForegroundColor Green
    
    # Verificar se √© ES module
    $packageJson = Get-Content "package.json" | ConvertFrom-Json
    if ($packageJson.type -eq "module") {
        Write-Host "   ‚úÖ Projeto configurado como ES module" -ForegroundColor Green
    }
} else {
    $errors += "package.json n√£o encontrado. Verifique se est√° no diret√≥rio correto"
}

# 6. Verificar node_modules
Write-Host "6Ô∏è‚É£ Verificando node_modules..." -ForegroundColor Yellow
if (Test-Path "node_modules") {
    Write-Host "   ‚úÖ node_modules encontrado" -ForegroundColor Green
} else {
    $warnings += "node_modules n√£o encontrado. Execute 'npm install'"
}

# 7. Verificar Cypress
Write-Host "7Ô∏è‚É£ Verificando Cypress..." -ForegroundColor Yellow
try {
    $cypressVersion = npx cypress --version 2>$null
    if ($LASTEXITCODE -eq 0) {
        Write-Host "   ‚úÖ Cypress encontrado" -ForegroundColor Green
        Write-Host "   $cypressVersion" -ForegroundColor Gray
    } else {
        $warnings += "Cypress n√£o encontrado. Execute 'npm install'"
    }
} catch {
    $warnings += "Erro ao verificar Cypress. Execute 'npm install'"
}

# 8. Verificar arquivos de teste
Write-Host "8Ô∏è‚É£ Verificando arquivos de teste..." -ForegroundColor Yellow

$testFiles = @(
    "cypress/e2e/sarah-student-registration.cy.ts",
    "cypress/e2e/franklin-login.cy.ts",
    "cypress/fixtures/sarah-user.json",
    "cypress/support/commands.ts",
    "cypress.config.ts"
)

foreach ($file in $testFiles) {
    if (Test-Path $file) {
        Write-Host "   ‚úÖ $file" -ForegroundColor Green
    } else {
        $warnings += "Arquivo de teste n√£o encontrado: $file"
    }
}

# 9. Verificar scripts npm
Write-Host "9Ô∏è‚É£ Verificando scripts npm..." -ForegroundColor Yellow
if (Test-Path "package.json") {
    $packageJson = Get-Content "package.json" | ConvertFrom-Json
    $scripts = $packageJson.scripts
    
    $expectedScripts = @("test:sarah", "test:birth-date", "cypress:open", "cypress:run")
    
    foreach ($script in $expectedScripts) {
        if ($scripts.$script) {
            Write-Host "   ‚úÖ npm run $script" -ForegroundColor Green
        } else {
            $warnings += "Script npm n√£o encontrado: $script"
        }
    }
}

# 10. Verificar conectividade
Write-Host "üîü Verificando conectividade..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "https://sua-parte.lovable.app" -Method Head -TimeoutSec 10
    if ($response.StatusCode -eq 200) {
        Write-Host "   ‚úÖ Aplica√ß√£o acess√≠vel: https://sua-parte.lovable.app" -ForegroundColor Green
    } else {
        $warnings += "Aplica√ß√£o pode n√£o estar funcionando corretamente"
    }
} catch {
    $warnings += "N√£o foi poss√≠vel acessar a aplica√ß√£o. Verifique a internet"
}

# Resumo
Write-Host ""
Write-Host "üìä Resumo da Verifica√ß√£o" -ForegroundColor Cyan
Write-Host ""

if ($errors.Count -eq 0 -and $warnings.Count -eq 0) {
    Write-Host "üéâ Tudo configurado corretamente!" -ForegroundColor Green
    Write-Host ""
    Write-Host "‚úÖ Comandos prontos para uso:" -ForegroundColor Green
    Write-Host "   npm run test:sarah" -ForegroundColor White
    Write-Host "   npm run cypress:open" -ForegroundColor White
    Write-Host "   .\scripts\test-sarah-cypress.ps1 -Open" -ForegroundColor White
} else {
    if ($errors.Count -gt 0) {
        Write-Host "‚ùå Erros encontrados:" -ForegroundColor Red
        foreach ($error in $errors) {
            Write-Host "   ‚Ä¢ $error" -ForegroundColor Red
        }
        Write-Host ""
    }
    
    if ($warnings.Count -gt 0) {
        Write-Host "‚ö†Ô∏è Avisos:" -ForegroundColor Yellow
        foreach ($warning in $warnings) {
            Write-Host "   ‚Ä¢ $warning" -ForegroundColor Yellow
        }
        Write-Host ""
    }
    
    Write-Host "üîß Pr√≥ximos passos:" -ForegroundColor Cyan
    if ($errors.Count -gt 0) {
        Write-Host "   1. Corrija os erros listados acima" -ForegroundColor White
        Write-Host "   2. Execute este script novamente" -ForegroundColor White
    } else {
        Write-Host "   1. Execute 'npm install' para instalar depend√™ncias" -ForegroundColor White
        Write-Host "   2. Tente executar os testes: npm run test:sarah" -ForegroundColor White
    }
}

Write-Host ""
Write-Host "üí° Comandos de teste dispon√≠veis:" -ForegroundColor Cyan
Write-Host "   npm run test:sarah                    # Teste da Sarah" -ForegroundColor White
Write-Host "   npm run test:birth-date               # Teste de data de nascimento" -ForegroundColor White
Write-Host "   npm run cypress:open                  # Modo interativo" -ForegroundColor White
Write-Host "   .\scripts\test-sarah-cypress.ps1      # Script PowerShell" -ForegroundColor White
Write-Host "   scripts\test-sarah-cypress.bat        # Script Batch" -ForegroundColor White
Write-Host ""
