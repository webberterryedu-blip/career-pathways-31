#!/usr/bin/env node

/**
 * Script para aplicar a migra√ß√£o de corre√ß√£o do schema
 * Sistema Ministerial - Fix Programas Schema and Security
 * Vers√£o simplificada que usa m√©todos dispon√≠veis do cliente Supabase
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

async function applySchemaFix() {
  console.log('üîß Aplicando corre√ß√£o do schema...');
  
  // Verificar vari√°veis de ambiente
  const supabaseUrl = process.env.VITE_SUPABASE_URL;
  const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;
  
  if (!supabaseUrl || !supabaseKey) {
    console.error('‚ùå Vari√°veis de ambiente n√£o configuradas:');
    console.error('VITE_SUPABASE_URL:', supabaseUrl ? '‚úÖ' : '‚ùå');
    console.error('VITE_SUPABASE_ANON_KEY:', supabaseKey ? '‚úÖ' : '‚ùå');
    console.log('');
    console.log('üí° Crie um arquivo .env na raiz do projeto com:');
    console.log('VITE_SUPABASE_URL=sua_url_do_supabase');
    console.log('VITE_SUPABASE_ANON_KEY=sua_chave_anonima');
    process.exit(1);
  }

  const supabase = createClient(supabaseUrl, supabaseKey);

  try {
    // Testar conex√£o
    console.log('üîå Testando conex√£o com Supabase...');
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('id')
      .limit(1);

    if (testError) {
      console.error('‚ùå Erro na conex√£o:', testError);
      process.exit(1);
    }

    console.log('‚úÖ Conex√£o estabelecida com sucesso');
    console.log('');

    // Verificar estrutura atual
    console.log('üîç Verificando estrutura atual da tabela programas...');
    const { data: currentPrograms, error: programsError } = await supabase
      .from('programas')
      .select('*')
      .limit(1);

    if (programsError) {
      console.error('‚ùå Erro ao acessar tabela programas:', programsError);
      process.exit(1);
    }

    console.log('‚úÖ Tabela programas acess√≠vel');
    console.log('');

    // Verificar se as colunas j√° existem
    console.log('üìã Verificando se as colunas semana e arquivo j√° existem...');
    
    // Tentar inserir um registro de teste para ver a estrutura
    const testProgram = {
      data_inicio_semana: '2025-01-01',
      mes_apostila: 'Janeiro 2025',
      partes: {},
      status: 'rascunho',
      user_id: testData[0].id
    };

    // Tentar adicionar as colunas se n√£o existirem
    try {
      testProgram.semana = 'Semana de teste';
      testProgram.arquivo = 'teste.pdf';
      
      const { data: insertData, error: insertError } = await supabase
        .from('programas')
        .insert(testProgram)
        .select();

      if (insertError) {
        if (insertError.message.includes('semana') || insertError.message.includes('arquivo')) {
          console.log('‚ö†Ô∏è As colunas semana e arquivo ainda n√£o existem');
          console.log('   Erro:', insertError.message);
          console.log('');
          console.log('üí° Para resolver isso, voc√™ precisa:');
          console.log('   1. Acessar o Supabase Dashboard');
          console.log('   2. Ir para SQL Editor');
          console.log('   3. Executar o seguinte SQL:');
          console.log('');
          console.log('   ALTER TABLE public.programas ADD COLUMN IF NOT EXISTS semana VARCHAR(100);');
          console.log('   ALTER TABLE public.programas ADD COLUMN IF NOT EXISTS arquivo VARCHAR(255);');
          console.log('');
          console.log('   4. Depois executar:');
          console.log('');
          console.log('   UPDATE public.programas SET semana = COALESCE(mes_apostila, \'Semana de \' || TO_CHAR(data_inicio_semana, \'DD/MM/YYYY\')) WHERE semana IS NULL;');
          console.log('   UPDATE public.programas SET arquivo = \'programa-\' || data_inicio_semana || \'.pdf\' WHERE arquivo IS NULL;');
          console.log('');
          console.log('   5. E finalmente:');
          console.log('');
          console.log('   ALTER TABLE public.programas ALTER COLUMN semana SET NOT NULL;');
          console.log('   ALTER TABLE public.programas ALTER COLUMN arquivo SET NOT NULL;');
          console.log('');
        } else {
          console.log('‚ùå Erro inesperado:', insertError.message);
        }
      } else {
        console.log('‚úÖ As colunas semana e arquivo j√° existem!');
        console.log('   Registro de teste inserido com ID:', insertData[0].id);
        
        // Remover o registro de teste
        await supabase
          .from('programas')
          .delete()
          .eq('id', insertData[0].id);
        
        console.log('   Registro de teste removido');
      }
    } catch (error) {
      console.log('‚ö†Ô∏è Erro ao testar estrutura:', error.message);
    }

    console.log('');
    console.log('üìä Verificando dados existentes...');
    const { data: existingPrograms, error: fetchError } = await supabase
      .from('programas')
      .select('id, data_inicio_semana, mes_apostila, semana, arquivo')
      .limit(5);

    if (fetchError) {
      console.log('‚ö†Ô∏è Erro ao buscar programas:', fetchError.message);
    } else {
      console.log(`   üìã ${existingPrograms.length} programas encontrados`);
      existingPrograms.forEach(program => {
        console.log(`      ID: ${program.id}`);
        console.log(`        Data: ${program.data_inicio_semana}`);
        console.log(`        M√™s: ${program.mes_apostila || 'N/A'}`);
        console.log(`        Semana: ${program.semana || 'N/A'}`);
        console.log(`        Arquivo: ${program.arquivo || 'N/A'}`);
        console.log('');
      });
    }

    console.log('‚úÖ Verifica√ß√£o conclu√≠da!');
    console.log('');
    console.log('üìã Pr√≥ximos passos:');
    console.log('   1. Execute o SQL fornecido no Supabase Dashboard');
    console.log('   2. Execute este script novamente para verificar');
    console.log('   3. Teste o sistema no frontend');
    console.log('');

  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  applySchemaFix();
}

module.exports = { applySchemaFix };
