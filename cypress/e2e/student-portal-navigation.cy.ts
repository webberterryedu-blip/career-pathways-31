describe('Student Portal Navigation - Franklin', () => {
  const franklinPortalUrl = Cypress.env('FRANKLIN_PORTAL_URL')

  beforeEach(() => {
    // Fazer login como Franklin antes de cada teste
    cy.loginAsFranklin()
    
    // Aguardar redirecionamento para o portal
    cy.url({ timeout: 30000 }).should('include', franklinPortalUrl)
    cy.waitForPageLoad()
  })

  it('deve exibir informa√ß√µes pessoais do estudante', () => {
    cy.log('üë§ Teste: Verifica√ß√£o de informa√ß√µes pessoais')
    
    // Verificar nome completo
    cy.get('body').should('contain.text', 'Franklin Marcelo Ferreira de Lima')
    
    // Verificar congrega√ß√£o
    cy.get('body').should('contain.text', 'Market Harborough')
    
    // Verificar cargo ministerial
    cy.get('body').should('contain.text', 'Publicador N√£o Batizado')
    
    // Verificar role de estudante
    cy.get('body').should('contain.text', 'estudante')
    
    cy.log('‚úÖ Informa√ß√µes pessoais exibidas corretamente')
  })

  it('deve exibir se√ß√£o da Escola do Minist√©rio Teocr√°tico', () => {
    cy.log('üìö Teste: Se√ß√£o da Escola do Minist√©rio')
    
    // Verificar t√≠tulo da se√ß√£o
    cy.get('body').should('contain.text', 'Escola do Minist√©rio')
    
    // Verificar informa√ß√µes sobre a estrutura da reuni√£o
    cy.get('body').should('contain.text', 'Nossa Vida e Minist√©rio Crist√£o')
    
    // Verificar men√ß√£o √†s partes da reuni√£o
    cy.get('body').should('contain.text', 'designa√ß√µes')
    
    cy.log('‚úÖ Se√ß√£o da Escola do Minist√©rio exibida')
  })

  it('deve exibir se√ß√£o de designa√ß√µes', () => {
    cy.log('üìã Teste: Se√ß√£o de designa√ß√µes')
    
    // Procurar por elementos relacionados a designa√ß√µes
    cy.get('body').then(($body) => {
      const hasAssignments = $body.text().includes('designa√ß√µes') || 
                           $body.text().includes('Designa√ß√µes') ||
                           $body.text().includes('assignments')
      
      if (hasAssignments) {
        cy.log('‚úÖ Se√ß√£o de designa√ß√µes encontrada')
      } else {
        cy.log('‚ö†Ô∏è Se√ß√£o de designa√ß√µes n√£o encontrada - pode estar vazia')
      }
    })
  })

  it('deve exibir se√ß√£o de cronograma de reuni√µes', () => {
    cy.log('üìÖ Teste: Cronograma de reuni√µes')
    
    // Procurar por elementos relacionados ao cronograma
    cy.get('body').then(($body) => {
      const hasSchedule = $body.text().includes('cronograma') || 
                         $body.text().includes('Cronograma') ||
                         $body.text().includes('reuni√µes') ||
                         $body.text().includes('schedule')
      
      if (hasSchedule) {
        cy.log('‚úÖ Cronograma de reuni√µes encontrado')
      } else {
        cy.log('‚ö†Ô∏è Cronograma n√£o encontrado - pode estar em desenvolvimento')
      }
    })
  })

  it('deve ser responsivo em diferentes tamanhos de tela', () => {
    cy.log('üì± Teste: Responsividade')
    
    // Testar em mobile
    cy.viewport(375, 667)
    cy.waitForPageLoad()
    cy.get('body').should('contain.text', 'Franklin')
    
    // Testar em tablet
    cy.viewport(768, 1024)
    cy.waitForPageLoad()
    cy.get('body').should('contain.text', 'Franklin')
    
    // Voltar para desktop
    cy.viewport(1280, 720)
    cy.waitForPageLoad()
    cy.get('body').should('contain.text', 'Franklin')
    
    cy.log('‚úÖ Portal responsivo em diferentes tamanhos')
  })

  it('deve manter dados ap√≥s navega√ß√£o', () => {
    cy.log('üîÑ Teste: Persist√™ncia de dados')
    
    // Verificar dados iniciais
    cy.get('body').should('contain.text', 'Franklin')
    
    // Simular navega√ß√£o (se houver abas ou se√ß√µes)
    cy.get('body').then(($body) => {
      // Procurar por links ou bot√µes de navega√ß√£o interna
      const navElements = $body.find('nav a, button[role="tab"], .tab-trigger')
      
      if (navElements.length > 0) {
        cy.wrap(navElements.first()).click()
        cy.waitForPageLoad()
        
        // Verificar se os dados ainda est√£o presentes
        cy.get('body').should('contain.text', 'Franklin')
        cy.log('‚úÖ Dados mantidos ap√≥s navega√ß√£o interna')
      } else {
        cy.log('‚ö†Ô∏è Elementos de navega√ß√£o interna n√£o encontrados')
      }
    })
  })

  it('deve carregar sem erros de console cr√≠ticos', () => {
    cy.log('üêõ Teste: Verifica√ß√£o de erros de console')
    
    // Capturar erros de console
    cy.window().then((win) => {
      const errors: string[] = []
      
      // Interceptar console.error
      const originalError = win.console.error
      win.console.error = (...args) => {
        errors.push(args.join(' '))
        originalError.apply(win.console, args)
      }
      
      // Aguardar um tempo para capturar erros
      cy.wait(3000).then(() => {
        // Filtrar erros cr√≠ticos (ignorar warnings menores)
        const criticalErrors = errors.filter(error => 
          !error.includes('ResizeObserver') &&
          !error.includes('Non-Error promise rejection') &&
          !error.includes('Warning:')
        )
        
        if (criticalErrors.length === 0) {
          cy.log('‚úÖ Nenhum erro cr√≠tico de console encontrado')
        } else {
          cy.log(`‚ö†Ô∏è Erros cr√≠ticos encontrados: ${criticalErrors.length}`)
          criticalErrors.forEach(error => cy.log(`‚ùå ${error}`))
        }
      })
    })
  })
})
