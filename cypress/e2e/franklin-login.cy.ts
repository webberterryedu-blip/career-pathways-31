describe('Franklin Login - Sistema Ministerial', () => {
  const franklinEmail = Cypress.env('FRANKLIN_EMAIL')
  const franklinPassword = Cypress.env('FRANKLIN_PASSWORD')
  const franklinUserId = Cypress.env('FRANKLIN_USER_ID')
  const franklinPortalUrl = Cypress.env('FRANKLIN_PORTAL_URL')

  beforeEach(() => {
    // Limpar dados antes de cada teste
    cy.clearLocalStorage()
    cy.clearCookies()
    
    // Configurar intercepta√ß√µes para monitorar requests
    cy.intercept('POST', '**/auth/v1/token**').as('authLogin')
    cy.intercept('GET', '**/auth/v1/user**').as('getUser')
    cy.intercept('GET', '**/rest/v1/user_profiles**').as('getUserProfile')
    cy.intercept('GET', '**/rest/v1/profiles**').as('getProfiles')
  })

  it('deve fazer login com sucesso e redirecionar para o portal do estudante', () => {
    cy.log('üéØ Teste: Login do Franklin e redirecionamento para portal do estudante')
    
    // Passo 1: Navegar para a p√°gina de autentica√ß√£o
    cy.log('üìç Passo 1: Navegando para p√°gina de login')
    cy.visit('/auth')
    cy.waitForPageLoad()
    
    // Verificar se est√° na p√°gina correta
    cy.shouldBeOnPage('/auth')
    cy.get('h1, h2').should('contain.text', 'Sistema Ministerial')
    
    // Passo 2: Preencher credenciais do Franklin
    cy.log('üìù Passo 2: Preenchendo credenciais do Franklin')
    
    // Aguardar formul√°rio aparecer
    cy.waitForElement('input[type="email"]', 15000)
    
    // Preencher email
    cy.get('input[type="email"]')
      .should('be.visible')
      .clear()
      .type(franklinEmail, { delay: 50 })
      .should('have.value', franklinEmail)
    
    // Preencher senha
    cy.get('input[type="password"]')
      .should('be.visible')
      .clear()
      .type(franklinPassword, { delay: 50 })
    
    // Passo 3: Submeter formul√°rio
    cy.log('üöÄ Passo 3: Submetendo formul√°rio de login')
    
    cy.get('button[type="submit"]')
      .should('be.visible')
      .should('not.be.disabled')
      .click()
    
    // Passo 4: Aguardar autentica√ß√£o
    cy.log('‚è≥ Passo 4: Aguardando resposta da autentica√ß√£o')
    
    cy.wait('@authLogin', { timeout: 20000 }).then((interception) => {
      expect(interception.response?.statusCode).to.be.oneOf([200, 201])
      cy.log('‚úÖ Autentica√ß√£o bem-sucedida')
    })
    
    // Passo 5: Verificar redirecionamento
    cy.log('üîÑ Passo 5: Verificando redirecionamento para portal do estudante')
    
    // Aguardar redirecionamento (pode demorar devido ao carregamento do perfil)
    cy.url({ timeout: 30000 }).should('include', franklinPortalUrl)
    cy.shouldBeOnPage(franklinPortalUrl)
    
    // Passo 6: Verificar carregamento do portal
    cy.log('üìã Passo 6: Verificando carregamento do portal do estudante')
    
    // Aguardar elementos do portal aparecerem
    cy.waitForElement('[data-testid="student-portal"], .student-portal, h1, h2', 20000)
    
    // Verificar se o nome do Franklin aparece
    cy.get('body').should('contain.text', 'Franklin')
    
    // Verificar elementos espec√≠ficos do portal do estudante
    cy.get('body').should('contain.text', 'Bem-vindo')
    cy.get('body').should('contain.text', 'Escola do Minist√©rio')
    
    // Passo 7: Verificar dados do usu√°rio
    cy.log('üë§ Passo 7: Verificando dados do usu√°rio')
    
    // Verificar se o perfil foi carregado (aguardar request se necess√°rio)
    cy.wait('@getUserProfile', { timeout: 15000 }).then((interception) => {
      if (interception.response?.statusCode === 200) {
        cy.log('‚úÖ Perfil carregado via view')
      } else {
        cy.log('‚ö†Ô∏è Perfil n√£o carregado via view, usando metadata')
      }
    })
    
    // Verificar informa√ß√µes do estudante
    cy.get('body').should('contain.text', 'estudante')
    
    cy.log('üéâ Teste conclu√≠do com sucesso!')
  })

  it('deve manter a sess√£o ap√≥s refresh da p√°gina', () => {
    cy.log('üîÑ Teste: Persist√™ncia de sess√£o ap√≥s refresh')
    
    // Fazer login primeiro
    cy.loginAsFranklin()
    
    // Aguardar redirecionamento
    cy.url({ timeout: 30000 }).should('include', franklinPortalUrl)
    
    // Fazer refresh da p√°gina
    cy.reload()
    cy.waitForPageLoad()
    
    // Verificar se ainda est√° logado e na p√°gina correta
    cy.url().should('include', franklinPortalUrl)
    cy.get('body').should('contain.text', 'Franklin')
    
    cy.log('‚úÖ Sess√£o mantida ap√≥s refresh')
  })

  it('deve mostrar erro para credenciais inv√°lidas', () => {
    cy.log('‚ùå Teste: Credenciais inv√°lidas')
    
    cy.visit('/auth')
    cy.waitForPageLoad()
    
    // Tentar login com senha incorreta
    cy.get('input[type="email"]')
      .should('be.visible')
      .type(franklinEmail)
    
    cy.get('input[type="password"]')
      .should('be.visible')
      .type('senhaincorreta123')
    
    cy.get('button[type="submit"]')
      .should('be.visible')
      .click()
    
    // Verificar mensagem de erro
    cy.get('body', { timeout: 10000 }).should('contain.text', 'Invalid')
    
    // Verificar que n√£o foi redirecionado
    cy.url().should('include', '/auth')
    
    cy.log('‚úÖ Erro mostrado corretamente para credenciais inv√°lidas')
  })

  it('deve funcionar o logout', () => {
    cy.log('üö™ Teste: Logout do sistema')
    
    // Fazer login primeiro
    cy.loginAsFranklin()
    
    // Aguardar redirecionamento
    cy.url({ timeout: 30000 }).should('include', franklinPortalUrl)
    
    // Procurar bot√£o de logout (pode estar em menu dropdown)
    cy.get('body').then(($body) => {
      if ($body.find('[data-testid="logout"], button:contains("Sair"), button:contains("Logout")').length > 0) {
        cy.get('[data-testid="logout"], button:contains("Sair"), button:contains("Logout")')
          .first()
          .click()
        
        // Verificar redirecionamento para p√°gina de login
        cy.url({ timeout: 10000 }).should('include', '/auth')
        cy.log('‚úÖ Logout realizado com sucesso')
      } else {
        cy.log('‚ö†Ô∏è Bot√£o de logout n√£o encontrado - pode estar em menu')
      }
    })
  })
})
