/// <reference types="cypress" />

describe('üîê Teste B√°sico de Login', () => {
  it('Deve fazer login e verificar se chegou ao dashboard', () => {
    cy.log('üß™ Teste b√°sico de login')
    
    // Fazer login como instrutor
    cy.loginAsInstructor()
    
    // Verificar redirecionamento para dashboard
    cy.url().should('include', '/dashboard')
    
    // Aguardar carregamento da p√°gina
    cy.wait(5000)
    
    // Verificar se a p√°gina carregou
    cy.get('body').should('be.visible')
    
    // Verificar se h√° algum conte√∫do na p√°gina
    cy.get('body').then(($body) => {
      const text = $body.text()
      cy.log(`üìÑ Conte√∫do da p√°gina: ${text.substring(0, 200)}...`)
      
      // Salvar o conte√∫do em arquivo
      cy.writeFile('cypress/page-content.txt', text).then(() => {
        cy.log('‚úÖ Conte√∫do da p√°gina salvo em cypress/page-content.txt')
      })
    })
    
    // Verificar se h√° elementos HTML
    cy.get('*').then(($elements) => {
      cy.log(`üîç Total de elementos na p√°gina: ${$elements.length}`)
      
      // Verificar se h√° elementos com texto
      const elementsWithText = $elements.filter((i, el) => {
        const text = el.textContent?.trim()
        return text && text.length > 0
      })
      
      cy.log(`üìù Elementos com texto: ${elementsWithText.length}`)
      
      // Salvar informa√ß√µes b√°sicas
      let info = `Total de elementos: ${$elements.length}\n`
      info += `Elementos com texto: ${elementsWithText.length}\n\n`
      
      // Primeiros 10 elementos com texto
      elementsWithText.slice(0, 10).each((i, el) => {
        const tagName = el.tagName.toLowerCase()
        const text = el.textContent?.trim().substring(0, 100) || 'sem texto'
        info += `${i + 1}. ${tagName}: "${text}"\n`
      })
      
      cy.writeFile('cypress/basic-info.txt', info).then(() => {
        cy.log('‚úÖ Informa√ß√µes b√°sicas salvas em cypress/basic-info.txt')
      })
    })
    
    cy.log('‚úÖ Teste b√°sico conclu√≠do')
  })
})
