/**
 * Test utility to verify the date validation fix
 * This can be run in the browser console to test the formatarDataSegura function
 */

import { format, isValid, parseISO } from 'date-fns';
import { ptBR } from 'date-fns/locale';

/**
 * Same function as implemented in ModalPreviaDesignacoes.tsx
 */
export const formatarDataSegura = (dataString: string): string => {
  if (!dataString || dataString.trim() === '') {
    return 'Data n√£o informada';
  }

  try {
    // Try to parse the date string
    const data = parseISO(dataString);
    
    // Check if the parsed date is valid
    if (!isValid(data)) {
      console.warn(`Data inv√°lida recebida: "${dataString}"`);
      return 'Data inv√°lida';
    }

    // Format the valid date
    return format(data, 'dd/MM/yyyy', { locale: ptBR });
  } catch (error) {
    console.error('Erro ao formatar data:', error, 'Data recebida:', dataString);
    return 'Erro na data';
  }
};

/**
 * Test cases for the date validation fix
 */
export const testDateValidation = () => {
  console.log('üß™ Testando corre√ß√£o de valida√ß√£o de data...\n');

  const testCases = [
    { input: '', expected: 'Data n√£o informada', description: 'String vazia' },
    { input: '   ', expected: 'Data n√£o informada', description: 'String com espa√ßos' },
    { input: 'invalid-date', expected: 'Data inv√°lida', description: 'Data inv√°lida' },
    { input: '2024-08-12', expected: '12/08/2024', description: 'Data v√°lida ISO' },
    { input: '2024-12-25', expected: '25/12/2024', description: 'Data de Natal' },
    { input: '2024-02-29', expected: '29/02/2024', description: 'Ano bissexto' },
    { input: '2023-02-29', expected: 'Data inv√°lida', description: 'Ano n√£o bissexto' },
    { input: 'abc123', expected: 'Data inv√°lida', description: 'String aleat√≥ria' },
    { input: '2024-13-01', expected: 'Data inv√°lida', description: 'M√™s inv√°lido' },
    { input: '2024-01-32', expected: 'Data inv√°lida', description: 'Dia inv√°lido' }
  ];

  let passed = 0;
  let failed = 0;

  testCases.forEach((testCase, index) => {
    const result = formatarDataSegura(testCase.input);
    const success = result === testCase.expected;
    
    if (success) {
      console.log(`‚úÖ Teste ${index + 1}: ${testCase.description}`);
      console.log(`   Input: "${testCase.input}" ‚Üí Output: "${result}"`);
      passed++;
    } else {
      console.log(`‚ùå Teste ${index + 1}: ${testCase.description}`);
      console.log(`   Input: "${testCase.input}"`);
      console.log(`   Esperado: "${testCase.expected}"`);
      console.log(`   Recebido: "${result}"`);
      failed++;
    }
    console.log('');
  });

  console.log(`üìä Resultados: ${passed} passou(ram), ${failed} falhou(ram)`);
  
  if (failed === 0) {
    console.log('üéâ Todos os testes passaram! A corre√ß√£o est√° funcionando corretamente.');
  } else {
    console.log('‚ö†Ô∏è Alguns testes falharam. Verifique a implementa√ß√£o.');
  }

  return { passed, failed, total: testCases.length };
};

/**
 * Test the original problematic scenario
 */
export const testOriginalError = () => {
  console.log('üîç Testando cen√°rio original do erro...\n');

  // This would have caused "Invalid time value" error before the fix
  const problematicInput = '';
  
  console.log('Cen√°rio que causava o erro:');
  console.log(`dataInicioSemana = "${problematicInput}"`);
  console.log('new Date(dataInicioSemana) =', new Date(problematicInput));
  console.log('isValid(new Date(dataInicioSemana)) =', isValid(new Date(problematicInput)));
  
  console.log('\nCom a corre√ß√£o:');
  const result = formatarDataSegura(problematicInput);
  console.log(`formatarDataSegura("${problematicInput}") = "${result}"`);
  
  console.log('\n‚úÖ Erro "Invalid time value" foi prevenido!');
  
  return result;
};

// Export for use in browser console or tests
if (typeof window !== 'undefined') {
  (window as any).testDateValidation = testDateValidation;
  (window as any).testOriginalError = testOriginalError;
  (window as any).formatarDataSegura = formatarDataSegura;
}
