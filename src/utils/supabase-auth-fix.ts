/**
 * Utilit√°rio para corrigir problemas de autentica√ß√£o do Supabase
 * 
 * Este arquivo cont√©m fun√ß√µes para diagnosticar e corrigir problemas
 * de autentica√ß√£o que causam erros 401 nas requisi√ß√µes da API.
 */

import { supabase } from '@/integrations/supabase/client';

/**
 * Verifica o estado atual da autentica√ß√£o
 */
export const checkAuthState = async () => {
  try {
    console.log('üîç Checking current auth state...');
    
    // Verificar sess√£o atual
    const { data: { session }, error: sessionError } = await supabase.auth.getSession();
    
    console.log('Session:', session);
    console.log('Session Error:', sessionError);
    
    if (sessionError) {
      console.error('‚ùå Session error:', sessionError);
      return { authenticated: false, error: sessionError.message };
    }
    
    if (!session) {
      console.log('‚ö†Ô∏è No active session found');
      return { authenticated: false, error: 'No active session' };
    }
    
    // Verificar usu√°rio atual
    const { data: { user }, error: userError } = await supabase.auth.getUser();
    
    console.log('User:', user);
    console.log('User Error:', userError);
    
    if (userError) {
      console.error('‚ùå User error:', userError);
      return { authenticated: false, error: userError.message };
    }
    
    if (!user) {
      console.log('‚ö†Ô∏è No user found');
      return { authenticated: false, error: 'No user found' };
    }
    
    // Testar uma requisi√ß√£o simples para verificar se a autentica√ß√£o est√° funcionando
    const { data: testData, error: testError } = await supabase
      .from('profiles')
      .select('id')
      .eq('id', user.id)
      .limit(1);
    
    if (testError) {
      console.error('‚ùå Test query error:', testError);
      return { authenticated: false, error: `API test failed: ${testError.message}` };
    }
    
    console.log('‚úÖ Authentication is working properly');
    return { 
      authenticated: true, 
      session, 
      user,
      testResult: testData 
    };
    
  } catch (error) {
    console.error('‚ùå Exception checking auth state:', error);
    return { authenticated: false, error: 'Unexpected error checking auth state' };
  }
};

/**
 * For√ßa uma atualiza√ß√£o da sess√£o de autentica√ß√£o
 */
export const refreshAuthSession = async () => {
  try {
    console.log('üîÑ Refreshing auth session...');
    
    const { data, error } = await supabase.auth.refreshSession();
    
    if (error) {
      console.error('‚ùå Error refreshing session:', error);
      return { success: false, error: error.message };
    }
    
    if (data.session) {
      console.log('‚úÖ Session refreshed successfully');
      return { success: true, session: data.session };
    }
    
    console.log('‚ö†Ô∏è No session returned from refresh');
    return { success: false, error: 'No session returned from refresh' };
    
  } catch (error) {
    console.error('‚ùå Exception refreshing session:', error);
    return { success: false, error: 'Unexpected error refreshing session' };
  }
};

/**
 * Cria um cliente Supabase com headers de autentica√ß√£o expl√≠citos
 */
export const createAuthenticatedSupabaseCall = async (operation: () => Promise<any>) => {
  try {
    // Verificar se h√° uma sess√£o ativa
    const { data: { session } } = await supabase.auth.getSession();
    
    if (!session) {
      throw new Error('No active session found');
    }
    
    // Verificar se o token n√£o expirou
    const now = Math.floor(Date.now() / 1000);
    if (session.expires_at && session.expires_at < now) {
      console.log('üîÑ Token expired, refreshing...');
      const refreshResult = await refreshAuthSession();
      if (!refreshResult.success) {
        throw new Error(`Token refresh failed: ${refreshResult.error}`);
      }
    }
    
    // Executar a opera√ß√£o
    return await operation();
    
  } catch (error) {
    console.error('‚ùå Authenticated operation failed:', error);
    throw error;
  }
};

/**
 * Wrapper para opera√ß√µes do Supabase com retry autom√°tico
 */
export const supabaseWithRetry = async (operation: () => Promise<any>, maxRetries = 2) => {
  let lastError;
  
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ Attempt ${attempt}/${maxRetries}`);
      
      // Verificar autentica√ß√£o antes de cada tentativa
      const authCheck = await checkAuthState();
      if (!authCheck.authenticated) {
        // Tentar refresh se n√£o estiver autenticado
        const refreshResult = await refreshAuthSession();
        if (!refreshResult.success) {
          throw new Error(`Authentication failed: ${authCheck.error}`);
        }
      }
      
      // Executar opera√ß√£o
      const result = await operation();
      console.log(`‚úÖ Operation succeeded on attempt ${attempt}`);
      return result;
      
    } catch (error: any) {
      console.error(`‚ùå Attempt ${attempt} failed:`, error);
      lastError = error;
      
      // Se for erro 401 e ainda temos tentativas, tentar refresh
      if (error.code === 'PGRST301' || error.message?.includes('401') || error.message?.includes('JWT')) {
        if (attempt < maxRetries) {
          console.log('üîÑ Auth error detected, refreshing session...');
          await refreshAuthSession();
          continue;
        }
      }
      
      // Se n√£o for erro de auth ou n√£o temos mais tentativas, falhar
      if (attempt === maxRetries) {
        break;
      }
    }
  }
  
  throw lastError;
};

/**
 * Diagn√≥stico completo de problemas de autentica√ß√£o
 */
export const diagnoseAuthIssues = async () => {
  console.group('üîç DIAGN√ìSTICO DE AUTENTICA√á√ÉO');
  
  try {
    // 1. Verificar vari√°veis de ambiente
    console.log('1. Verificando vari√°veis de ambiente...');
    const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
    const supabaseKey = import.meta.env.VITE_SUPABASE_ANON_KEY;
    
    console.log('VITE_SUPABASE_URL:', supabaseUrl ? '‚úÖ Definida' : '‚ùå N√£o definida');
    console.log('VITE_SUPABASE_ANON_KEY:', supabaseKey ? '‚úÖ Definida' : '‚ùå N√£o definida');
    
    // 2. Verificar estado da sess√£o
    console.log('2. Verificando estado da sess√£o...');
    const authState = await checkAuthState();
    console.log('Estado da autentica√ß√£o:', authState.authenticated ? '‚úÖ Autenticado' : '‚ùå N√£o autenticado');
    if (!authState.authenticated) {
      console.log('Erro:', authState.error);
    }
    
    // 3. Verificar localStorage
    console.log('3. Verificando localStorage...');
    const authKeys = [];
    for (let i = 0; i < localStorage.length; i++) {
      const key = localStorage.key(i);
      if (key && (key.includes('supabase') || key.includes('auth'))) {
        authKeys.push(key);
      }
    }
    console.log('Chaves de auth no localStorage:', authKeys.length > 0 ? authKeys : 'Nenhuma encontrada');
    
    // 4. Testar conectividade
    console.log('4. Testando conectividade...');
    try {
      const response = await fetch(`${supabaseUrl}/rest/v1/`, {
        headers: {
          'apikey': supabaseKey,
          'Authorization': `Bearer ${supabaseKey}`
        }
      });
      console.log('Conectividade com Supabase:', response.ok ? '‚úÖ OK' : `‚ùå Erro ${response.status}`);
    } catch (error) {
      console.log('Conectividade com Supabase: ‚ùå Erro de rede');
    }
    
    return {
      environmentOk: !!(supabaseUrl && supabaseKey),
      authenticationOk: authState.authenticated,
      hasStoredAuth: authKeys.length > 0,
      recommendations: generateRecommendations(authState, authKeys.length > 0)
    };
    
  } catch (error) {
    console.error('Erro durante diagn√≥stico:', error);
    return {
      environmentOk: false,
      authenticationOk: false,
      hasStoredAuth: false,
      error: error
    };
  } finally {
    console.groupEnd();
  }
};

/**
 * Gera recomenda√ß√µes baseadas no diagn√≥stico
 */
const generateRecommendations = (authState: any, hasStoredAuth: boolean) => {
  const recommendations = [];
  
  if (!authState.authenticated) {
    if (!hasStoredAuth) {
      recommendations.push('Fa√ßa login novamente - n√£o h√° dados de autentica√ß√£o armazenados');
    } else {
      recommendations.push('Limpe os dados de autentica√ß√£o e fa√ßa login novamente');
    }
  }
  
  if (authState.error?.includes('JWT')) {
    recommendations.push('Token JWT inv√°lido - execute a limpeza de tokens');
  }
  
  if (authState.error?.includes('401')) {
    recommendations.push('Erro de autoriza√ß√£o - verifique as permiss√µes do usu√°rio');
  }
  
  return recommendations;
};