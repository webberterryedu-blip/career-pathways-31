{
  "meta": {
    "project": "Sistema Ministerial Simplificado",
    "date": "2025-09-13",
    "prepared_by": "Generated by TestSprite"
  },
  "product_overview": "Sistema simplificado para a gestão de designações ministeriais baseado nos PDFs oficiais da Escola do Ministério Teocrático das Testemunhas de Jeová. Este sistema concentra as funcionalidades no Dashboard do Instrutor, eliminando a complexidade do Admin Dashboard e utilizando dados mockados provenientes de arquivos PDF convertidos em JSON. O sistema oferece gerenciamento de estudantes, designações conforme as regras S-38, autenticação segura via Supabase, interface responsiva e funcionalidade offline.",
  "core_goals": [
    "Simplificar a arquitetura eliminando o Admin Dashboard e centralizando funcionalidades no Dashboard do Instrutor",
    "Utilizar dados mockados extraídos dos PDFs oficiais para a programação ministerial",
    "Permitir que o Instrutor gerencie estudantes e atribua designações às partes da programação",
    "Garantir acesso seguro via autenticação Supabase com controle baseado em roles",
    "Oferecer visualização personalizada das designações para os estudantes",
    "Implementar funcionalidade offline para garantir acesso aos dados mesmo sem conexão"
  ],
  "key_features": [
    "Dashboard do Instrutor unificado exibindo programação ministerial mockada",
    "Lista e gestão de estudantes com CRUD simplificado",
    "Sistema de designação conforme regras S-38, com validações e atribuições de estudantes",
    "Programação baseada em JSONs convertidos dos PDFs originais oficiais",
    "Portal do Estudante para visualização das suas designações pessoais",
    "Autenticação robusta com Supabase Auth e políticas de segurança (RLS)",
    "Funcionalidade offline completa com cache local IndexedDB e Service Workers",
    "Navegação clara, responsiva e intuitiva para instrutores e estudantes"
  ],
  "user_flow_summary": [
    "O usuário instrutor realiza login e acessa o Dashboard do Instrutor",
    "O Dashboard exibe a programação das semanas baseadas nos dados mockados dos PDFs",
    "O instrutor visualiza a lista de estudantes e designa cada parte da programação para os estudantes adequados",
    "Designações são salvas e podem ser atualizadas conforme necessário",
    "Estudantes realizam login via portal dedicado e visualizam suas designações personalizadas",
    "Usuários instrutores e estudantes podem acessar o sistema mesmo em modo offline com dados sincronizados locais",
    "O sistema autentica e assegura o acesso via roles definidas no Supabase"
  ],
  "validation_criteria": [
    "Admin Dashboard totalmente removido e não acessível",
    "Dashboard do Instrutor apresenta corretamente a programação baseada nos JSONs mockados",
    "Designações de estudantes são criadas, atualizadas e refletidas corretamente no banco",
    "Estudante visualiza apenas suas designações no portal dedicado",
    "Autenticação via Supabase funciona para todos os perfis configurados",
    "Dados offline são atualizados após sincronização e acessíveis sem conexão",
    "Fluxos de navegação estão completos e sem erros de carregamento",
    "Sistema opera sem erros no console e sem falhas de integração"
  ],
  "code_summary": {
    "tech_stack": [
      "JavaScript",
      "Node.js",
      "Express",
      "Supabase",
      "PostgreSQL",
      "React",
      "TypeScript",
      "Tailwind CSS"
    ],
    "features": [
      {
        "name": "Authentication",
        "description": "User authentication system with login, token refresh, and logout functionality using Supabase Auth",
        "files": [
          "backend/routes/auth.js",
          "backend/config/supabase.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Authentication API",
            "version": "1.0.0"
          },
          "paths": {
            "/auth/login": {
              "post": {
                "summary": "User login",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "email": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Login successful"
                  },
                  "400": {
                    "description": "Email and password are required"
                  },
                  "401": {
                    "description": "Invalid credentials"
                  }
                }
              }
            },
            "/auth/token": {
              "post": {
                "summary": "Refresh token",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "refresh_token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Token refreshed successfully"
                  },
                  "400": {
                    "description": "Refresh token is required"
                  },
                  "401": {
                    "description": "Invalid refresh token"
                  }
                }
              }
            },
            "/auth/v1/token": {
              "post": {
                "summary": "Alternative token endpoint (for compatibility)",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "refresh_token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Token refreshed successfully"
                  },
                  "400": {
                    "description": "Refresh token is required"
                  },
                  "401": {
                    "description": "Invalid refresh token"
                  }
                }
              }
            },
            "/auth/logout": {
              "post": {
                "summary": "User logout",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "access_token": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Logout successful"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Programações",
        "description": "Ministerial program management including PDF parsing, JSON handling, and mock data",
        "files": [
          "backend/routes/programacoes.js",
          "backend/services/pdfParser.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Programações API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/programacoes/stats": {
              "get": {
                "summary": "Get program statistics",
                "parameters": [
                  {
                    "name": "congregacao_id",
                    "in": "query",
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Statistics retrieved successfully"
                  }
                }
              }
            },
            "/api/programacoes/pdfs": {
              "get": {
                "summary": "List available PDFs",
                "responses": {
                  "200": {
                    "description": "PDFs listed successfully"
                  }
                }
              }
            },
            "/api/programacoes/parse-pdf": {
              "post": {
                "summary": "Parse and save a PDF",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "pdfPath": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "PDF processed and saved successfully"
                  },
                  "400": {
                    "description": "PDF path is required"
                  },
                  "404": {
                    "description": "PDF file not found"
                  }
                }
              }
            },
            "/api/programacoes/json-files": {
              "get": {
                "summary": "List JSON program files",
                "responses": {
                  "200": {
                    "description": "JSON files listed successfully"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Designações",
        "description": "Assignment management for ministerial roles",
        "files": [
          "backend/routes/designacoes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Designações API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/designacoes/": {
              "get": {
                "summary": "List all assignments",
                "responses": {
                  "200": {
                    "description": "Assignments retrieved successfully"
                  }
                }
              },
              "post": {
                "summary": "Create a new assignment",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object"
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Assignment created successfully"
                  }
                }
              }
            },
            "/api/designacoes/{id}": {
              "get": {
                "summary": "Get a specific assignment",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Assignment retrieved successfully"
                  },
                  "404": {
                    "description": "Assignment not found"
                  }
                }
              },
              "put": {
                "summary": "Update an assignment",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Assignment updated successfully"
                  },
                  "404": {
                    "description": "Assignment not found"
                  }
                }
              },
              "delete": {
                "summary": "Delete an assignment",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Assignment deleted successfully"
                  },
                  "404": {
                    "description": "Assignment not found"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Estudantes",
        "description": "Student management system",
        "files": [
          "backend/routes/estudantes.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Estudantes API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/estudantes/": {
              "get": {
                "summary": "List all students",
                "responses": {
                  "200": {
                    "description": "Students retrieved successfully"
                  }
                }
              },
              "post": {
                "summary": "Create a new student",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object"
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Student created successfully"
                  }
                }
              }
            },
            "/api/estudantes/{id}": {
              "get": {
                "summary": "Get a specific student",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Student retrieved successfully"
                  },
                  "404": {
                    "description": "Student not found"
                  }
                }
              },
              "put": {
                "summary": "Update a student",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Student updated successfully"
                  },
                  "404": {
                    "description": "Student not found"
                  }
                }
              },
              "delete": {
                "summary": "Delete a student",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Student deleted successfully"
                  },
                  "404": {
                    "description": "Student not found"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Family Members",
        "description": "Family member management with relationships to students",
        "files": [
          "backend/routes/familyMembers.js",
          "supabase/migrations/20250916150000_add_family_members_table.sql"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Family Members API",
            "version": "1.0.0"
          },
          "paths": {
            "/family-members/": {
              "get": {
                "summary": "List all family members",
                "responses": {
                  "200": {
                    "description": "Family members retrieved successfully"
                  }
                }
              },
              "post": {
                "summary": "Create a new family member",
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string"
                          },
                          "relationship": {
                            "type": "string"
                          },
                          "student_id": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                },
                "responses": {
                  "201": {
                    "description": "Family member created successfully"
                  },
                  "400": {
                    "description": "Name is required"
                  }
                }
              }
            },
            "/family-members/{id}": {
              "get": {
                "summary": "Get a specific family member",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Family member retrieved successfully"
                  },
                  "404": {
                    "description": "Family member not found"
                  }
                }
              },
              "put": {
                "summary": "Update a family member",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "requestBody": {
                  "content": {
                    "application/json": {
                      "schema": {
                        "type": "object"
                      }
                    }
                  }
                },
                "responses": {
                  "200": {
                    "description": "Family member updated successfully"
                  },
                  "404": {
                    "description": "Family member not found"
                  }
                }
              },
              "delete": {
                "summary": "Delete a family member",
                "parameters": [
                  {
                    "name": "id",
                    "in": "path",
                    "required": true,
                    "schema": {
                      "type": "string"
                    }
                  }
                ],
                "responses": {
                  "200": {
                    "description": "Family member deleted successfully"
                  },
                  "404": {
                    "description": "Family member not found"
                  }
                }
              }
            }
          }
        }
      },
      {
        "name": "Reports",
        "description": "Reporting and analytics functionality",
        "files": [
          "backend/routes/reports.js"
        ],
        "api_doc": {
          "openapi": "3.0.0",
          "info": {
            "title": "Reports API",
            "version": "1.0.0"
          },
          "paths": {
            "/api/reports/": {
              "get": {
                "summary": "Get reports",
                "responses": {
                  "200": {
                    "description": "Reports retrieved successfully"
                  }
                }
              }
            }
          }
        }
      }
    ]
  }
}
